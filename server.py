{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "connect to server\n",
      "connected!\n",
      "waiting for the client\n",
      "Accept new connection from 127.0.0.1:51582...\n",
      "receiving, please wait for a second ...\n",
      "create file\n",
      "reach the end of file\n",
      "Accept new connection from 127.0.0.1:51682...\n",
      "receiving, please wait for a second ...\n"
     ]
    }
   ],
   "source": [
    "import socket, ssl, threading\n",
    "import mysql.connector\n",
    "import os,sys\n",
    "import time\n",
    "import json\n",
    "\n",
    "def connectdb():\n",
    "    print('connect to server')\n",
    "    db = mysql.connector.connect(user = 'root',password = '',\n",
    "                                 host = 'localhost',database = 'projectdb')\n",
    "\n",
    "    print('connected!')\n",
    "    return db\n",
    "\n",
    "db = connectdb()\n",
    "\n",
    "def createtable(db): \n",
    "    cursor = db.cursor() \n",
    "    #cursor.execute(\"DROP TABLE IF EXISTS test\")\n",
    "    #cursor.execute(\"DROP TABLE IF EXISTS data\")\n",
    "    sql = \"\"\"create table if not exists test(\n",
    "             id int4 auto_increment primary key,\n",
    "             name varchar(255),\n",
    "             starttime decimal(20,18),\n",
    "             endtime decimal(20,18),\n",
    "             length decimal(20,18),\n",
    "             instrument varchar(255)\n",
    "             )\"\"\"\n",
    "    sql2 = \"\"\"create table if not exists data(\n",
    "              Id int4 auto_increment primary key,\n",
    "              name varchar(255),\n",
    "              EIC decimal(6,2),\n",
    "              data json\n",
    "              )\"\"\"\n",
    "    # create test\n",
    "    cursor.execute(sql)\n",
    "    cursor.execute(sql2)\n",
    "    \n",
    "createtable(db)\n",
    "def insert(db,name,start_time,end_time,length,instrument,targets):\n",
    "    cursor = db.cursor()\n",
    "    sql = \"\"\"insert into test(name,starttime,endtime,length,instrument)\n",
    "             values (%s,%s,%s,%s,%s);\"\"\"\n",
    "    \n",
    "    cursor.execute(sql,(name,start_time,end_time,length,instrument))\n",
    "    for target in targets:\n",
    "        target1 = target['target']\n",
    "        del target['lowerLimit']\n",
    "        del target['upperLimit']\n",
    "        del target['target']\n",
    "        sql2 = \"\"\"insert into data(name,EIC,data)\n",
    "                  values (%s,%s,%s);\"\"\"\n",
    "        cursor.execute(sql2,(name,target1,json.dumps(target)))\n",
    "    db.commit()\n",
    "\n",
    "\n",
    "context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)  \n",
    "context.load_cert_chain(certfile=\"cert.pem\", keyfile=\"key.pem\")\n",
    "#create socket\n",
    "server = socket.socket()\n",
    "#bind address and port\n",
    "\n",
    "server.bind((\"127.0.0.1\",300))\n",
    "#listen request\n",
    "server.listen(5)\n",
    "\n",
    "print(\"waiting for the client\")\n",
    "\n",
    "keyFiles = {'instrument1':'111','instrument2':'222','instrument3':'333'}\n",
    "\n",
    "def checkUsername(username,conn):\n",
    "    \n",
    "    if username in keyFiles:\n",
    "        conn.sendall('valid'.encode())\n",
    "    else:\n",
    "        conn.sendall('invalid'.encode())\n",
    "\n",
    "def checkPassword(username,password,conn):\n",
    "    \n",
    "\n",
    "    if keyFiles[username]==password:\n",
    "        conn.sendall('valid'.encode())                                                                                                                                                                                                                                                                                          \n",
    "        return 'valid'\n",
    "    else:\n",
    "        conn.sendall('invalid'.encode())\n",
    "        return 'invalid'\n",
    "    \n",
    "def receiveFile(conn):\n",
    "    a = 0\n",
    "    while True:\n",
    "        data = conn.recv(1024).decode()\n",
    "   \n",
    "        if data == 'finish':\n",
    "            print ('reach the end of file')\n",
    "            with open('./' + s +'.json','r') as f:\n",
    "                jsonFile = json.load(f)\n",
    "            f.close()\n",
    "            name = jsonFile['file name']\n",
    "            start_time = jsonFile['start time']\n",
    "            end_time = jsonFile['end time']\n",
    "            length = jsonFile['length']\n",
    "            instrument = jsonFile['instrument']\n",
    "            targets = jsonFile['EIC']\n",
    "            insert(db,name,start_time,end_time,length,instrument,targets)            \n",
    "            pass\n",
    "        elif data == 'begin to send':\n",
    "            print ('create file')\n",
    "            a += 1\n",
    "            s = str(a)\n",
    "            with open('./' + s +'.json', 'w') as f:\n",
    "                pass\n",
    "        else:\n",
    "            with open('./' + s +'.json', 'a') as f:\n",
    "                f.write(data)\n",
    "\n",
    "def connect(sock, addr):\n",
    "    print ('Accept new connection from %s:%s...' % addr)\n",
    "    connstream = context.wrap_socket(sock, server_side=True)\n",
    "    \n",
    "    while True:\n",
    "        data = connstream.recv(1024).decode()\n",
    "\n",
    "        if not data:\n",
    "            continue\n",
    "\n",
    "        elif data.startswith('username'):\n",
    "            username=data.split(':')[-1]\n",
    "            checkUsername(username,connstream)\n",
    "        elif data.startswith('password'):\n",
    "            userpasswd=data.split(':')[-1]\n",
    "            result = checkPassword(username,userpasswd,connstream)\n",
    "            if result == 'valid':\n",
    "                break\n",
    "\n",
    "                \n",
    "    \n",
    "            \n",
    "    #connstream.send('Welcome from server!'.encode())\n",
    "    print ('receiving, please wait for a second ...')\n",
    "    \n",
    "        \n",
    "    receiveFile(connstream)\n",
    "    \n",
    "    #connstream.close()\n",
    "    print ('receive finished')\n",
    "    print ('Connection from %s:%s closed.' % addr)\n",
    "\n",
    "\n",
    "while True:    \n",
    "    conn,addr = server.accept()\n",
    "    t = threading.Thread(target = connect, args = (conn,addr))\n",
    "    t.start()  \n",
    "  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
